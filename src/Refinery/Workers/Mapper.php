<?php

namespace Emerald\Refinery\Workers;

use Emerald\Refinery\Refinery;
use Emerald\Refinery\Worker;

/**
 * Class Mapper
 *
 * @package Emerald\Refinery\Workers
 */
class Mapper extends Worker
{

    /**
     * @param   array       $onHand
     */
    public function __construct($onHand)
    {
        $this
            ->requires('directory', 'd')
            ->requires('output',    'o')
            ->optional('exclude',   'exclude')
        ;

        $this->version  = '0.2.2';
        $this->manager  = 'devon.hazelett@motosport.com';
    }

    /**
     * {@inheritdoc}
     */
    public function work()
    {
        if (file_exists($d = $this->get('directory', false)) && file_exists($o = $this->get('output', false))) {
            if (($file = fopen($o, 'w', false)) !== false) {

                $lines[] = "<?php";
                $lines[] = "\n/**";
                $lines[] = "\n * This file is automagically generated at build time, don't edit directly!";
                $lines[] = "\n * Generated by: {$this->getName()} @ " . strtoupper(date('H:i \o\n M d Y', time()));
                $lines[] = "\n * " . Refinery::signature();
                $lines[] = "\n */";

                $lines[] = "\n\nreturn array(\n";

                $i = 0;

                /**
                 * @var \SplFileInfo $lib
                 */
                foreach ($this->getIterator($d) as $path => $lib) {
                    $i++;

                    $class = $lib->getBasename('.php');

                    if ($this->has('exclude')) {
                        $dir      = preg_replace('{^lib(\/|\\\\)}', '', $lib->getPath());
                        $excluded = explode(',', $this->get('exclude'));

                        foreach ($excluded as $exclude) {

                            if (strpos($dir, $exclude) !== false) {
                                $i--;
                                $this->say('Excluded ' . $lib->getPathname(), Worker::MESSAGE_DEBUG);
                                continue 2;
                            }
                        }

                    }

                    $path = preg_replace('{^lib(\/|\\\\)}', '/', $path);

                    $path = str_replace(DIRECTORY_SEPARATOR, '/',$path);


                    $lines[] = "    '{$class}' => LIB . '{$path}',\n";

                }

                $lines[] = ");\n";

                foreach ($lines as $line) {
                    fwrite($file, $line);
                }

                fclose($file);

                $this->farewell = "I mapped {$i} classes";

                return Worker::JOB_COMPLETE_OKAY;

            }


        }

        return Worker::JOB_COMPLETE_FAIL;
    }


    /**
     * @param $directory
     *
     * @return \RegexIterator
     */
    private function getIterator($directory)
    {
        return new \RegexIterator(
            new \RecursiveIteratorIterator(
                new \RecursiveDirectoryIterator($directory),
                \RecursiveIteratorIterator::SELF_FIRST
            ),
            '{^.+\.php$}',
            \RecursiveRegexIterator::MATCH
        );
    }


}
